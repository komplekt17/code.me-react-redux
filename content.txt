Урок № 2 Работа с JSX в фреймворке React

На рендеринг
2-1. Сделайте так, чтобы метод render вывел на экран следующее:

<div>
	текст
</div>

2-2. Пусть в методе render есть переменная text с текстом 'текст'. С ее помощью выведите следующее:

<div>
	текст
</div>

2-3. Пусть в методе render есть переменная text с текстом '<p>текст</p>'. С ее помощью выведите следующее:

<div>
	<p>текст</p>
</div>

2-4. Пусть в методе render есть переменная text1 с текстом '<p>текст1</p>' и переменная text2 с текстом '<p>текст2</p>'. С их помощью выведите следующее:

<div>
	<p>текст1</p>
	<p>!!!</p>
	<p>текст2</p>
</div>

На атрибуты
2-5. Пусть в методе render есть переменная attr с текстом 'block'. Сделайте так, чтобы метод render вывел на экран следующее (значение атрибута id должно вставится из переменной attr):

<div id="block">
	текст
</div>

2-6. Пусть в методе render есть переменная str с текстом 'block'. Сделайте так, чтобы метод render вывел на экран следующее (значение атрибута class должно вставится из переменной str):

<div class="block">
	текст
</div>

На работу с CSS
2-7. Дан див с текстом. Установите этому диву зеленый цвет, границу и border-radius в 30px. Показать решение.

На условия
2-8. Пусть в методе render есть переменная show, которая может иметь значение true или false. Сделайте так, чтобы, если эта переменная равна true, метод render вывел на экран следующее:

<div>
	текст 1
</div>
А если эта переменная равна false, то следующее:

<div>
	текст 2
</div>

На циклы
2-9. Пусть в методе render есть переменная arr, в которой лежит массив с элементами ['a', 'b', 'c', 'd', 'e']. Сделайте так, чтобы метод render вывел на экран следующее (в каждую лишку запишется один из элементов массива):

<ul>
	<li>a</li>
	<li>b</li>
	<li>c</li>
	<li>d</li>
	<li>e</li>
</ul>

На методы
2-10. Пусть класс App имеет метод getText(), который своим результатом возвращает '<p>текст</p>'. Используя метод getText() в методе render выведите на экран следующее:

<div>
	<p>текст</p>
</div>

2-11. Пусть класс App имеет метод getNum1(), который своим результатом возвращает число 1 и метод getNum2(), который своим результатом возвращает число 2. Используя эти методы в методе render выведите на экран сумму результатов этих методов (3 - результат сложения getNum1() и getNum2()):

<div>
	текст 3
</div>

Урок № 3 Работа с состояниями и событиями

На стейты
3-1. Дан следующий стейт:

this.state = {name: 'Иван', age: 25};
Сделайте так, чтобы метод render вывел на экран следующее ('Иван' и 25 должны взяться из стейта):

<div>
	имя: Иван, возраст: 25
</div>

На события
3-2. Сделайте кнопочку, по нажатию на которую сработает метод showMessage и на экран алертом выведется сообщение с текстом 'hello'.

3-3. Дан следующий стейт:

this.state = {name: 'Иван', age: 25};
Сделайте кнопочку, по нажатию на которую сработает метод showName и на экран алертом выведется имя пользователя из стейта.

На setState
3-4. Дан следующий стейт:

this.state = {name: 'Иван', age: 25};
Изначально метод render выводит на экран следующее:

<div>
	имя: Иван, возраст: 25
</div>
Сделайте кнопочку, по нажатию на которую 'Иван' поменяется на 'Коля', а 25 поменяется на 30.

Урок № 4 Работа с if и циклами

На сокращенный if
4-1. Дан следующий стейт:

this.state = {show: true, name: 'Иван'};
Изначально результат работы метода render следующий ('Иван' берется из this.state.name):

<div>
	<p>Привет, Иван!</p>
</div>
Сделайте так, чтобы если this.state.show был равен true, то выводился текст 'Привет, Иван', а если равен false - то 'Пока, Иван'.

На показ элементов
4-2. Дан следующий стейт:

this.state = {name: 'Иван', age: 25};
Дана кнопка (результат работы метода render):

<div>
	<button>Нажми на меня</button>
</div>
Сделайте так, чтобы по нажатию на кнопку результат работы метода render изменился на следующее ('Иван' и 25 должны взяться из стейта):

<div>
	<p>имя: Иван, возраст: 25</p>
	<button>Нажми на меня</button>
</div>

4-3. Переделайте предыдущую задачу так, чтобы по первому нажатию на кнопку абзац с нашим текстом показывался, а по второму нажатию - скрывался. Показать решение.

4-4. Переделайте предыдущую задачу так, чтобы по заходу на страницу текст кнопки был 'показать', а после нажатия на нее - 'скрыть' (ну и так далее - по каждому нажатию текст должен чередоваться). Показать решение.

На циклы
4-5. Пусть в стейте дан массив имен ['Коля', 'Вася', 'Петя']. Выведите каждый элемент этого массива в отдельной <li> в списке ul. Вот так:

<ul>
	<li>Коля</li>
	<li>Вася</li>
	<li>Петя</li>
</ul>

4-6. Переделайте предыдущую задачу так, чтобы в каждой li кроме элемента массива еще и стоял его порядковый номер в массиве. Вот так:

<ul>
	<li>Коля - 1</li>
	<li>Вася - 2</li>
	<li>Петя - 3</li>
</ul>

4-7. Дан следующий стейт:

this.state = {
	hrefs: [
		{href: '1.html', text: 'ссылка 1'},
		{href: '2.html', text: 'ссылка 2'},
		{href: '3.html', text: 'ссылка 3'},
	]
};
С помощью this.state.hrefs выведите на экран следующее:

<ul>
	<li><a href="1.html">ссылка 1</a></li>
	<li><a href="2.html">ссылка 2</a></li>
	<li><a href="3.html">ссылка 3</a></li>
</ul>

Урок № 5 Продвинутая работа с циклами

5-1. Пусть в стейте дан массив имен ['Коля', 'Вася', 'Петя', 'Иван', 'Дима']. Выведите каждый элемент этого массива в отдельной <li> в списке ul.

5-2. Переделайте предыдущую задачу так, чтобы под списком появилась кнопочка, по нажатию на которую в конец списка будет добавляться элемент с текстом 'пункт'.

5-3. Переделайте предыдущую задачу так, чтобы появилась кнопочка, по нажатию на которую каждый раз будет исчезать последняя li из списка (каждый раз по одной, пока li в списке не закончатся).

5-4. Переделайте предыдущую задачу так, чтобы рядом с каждым именем появилась кнопочка, по нажатию на которую li с этим именем будет удаляться.

Урок № 6 Работа с формами

На инпуты
6-1. Дан инпут и абзац. Сделайте так, чтобы при наборе текста в инпуте он автоматически появлялся в этом абзаце.

6-2. Модифицируйте предыдущую задачу так, чтобы текст в абзац выводился в верхнем регистре.

6-3. Дан инпут и абзац. В инпут вводится возраст пользователя. Сделайте так, чтобы при наборе текста в абзаце автоматически появлялся год рождения пользователя.

6-4. Дан инпут и 3 абзаца. В инпут вводится ФИО пользователя через пробел. Сделайте так, чтобы при наборе текста в первом абзаце появилась фамилия пользователя, во втором - имя, а в третьем - отчество.

На submit
6-5. Дан инпут и кнопка submit. В инпут вводится текст. Сделайте так, чтобы по нажатию на кнопку этот текст вывелся в какой-нибудь абзац.

6-6. Даны два инпута и кнопка. В инпуты вводятся числа. Сделайте так, чтобы по нажатию на кнопку под инпутами в какой-нибудь абзац вывелась сумма этих чисел.

6-7. Даны 3 инпута и кнопка. В инпуты вводится имя, фамилия и отчество. Сделайте так, чтобы по нажатию на кнопку под инпутами в какой-нибудь абзац вывелось полное ФИО пользователя.

На формы + массивы
6-8. Дан массив с именами пользователей. Выведите этот массив в виде списка ul. Также даны инпут и кнопка. Сделайте так, чтобы в инпут можно было ввести еще одно имя, нажать на кнопку - и это имя добавилось в конец списка ul.

6-9. Модифицируйте предыдущую задачу так, чтобы в конце каждой li появилась кнопка для удаления этого пункта списка.

6-10. Дан следующий стейт:

this.state = {
	hrefs: [
		{href: '1.html', text: 'ссылка 1'},
		{href: '2.html', text: 'ссылка 2'},
		{href: '3.html', text: 'ссылка 3'},
	]
};
Выведите на экран следующее:

<ul>
	<li><a href="1.html">ссылка 1</a></li>
	<li><a href="2.html">ссылка 2</a></li>
	<li><a href="3.html">ссылка 3</a></li>
</ul>
Сделайте 2 инпута и кнопку, по нажатию на которую в список добавится новый li, причем href возьмется из первого инпута, а текст ссылки - из второго.

6-11. Дан массив. Выведите этот массив в виде списка ul. Также даны инпут и кнопка. Сделайте так, чтобы в инпут можно было ввести число, нажать на кнопку - и из списка ul удалился элемент с введенным в инпут номером.

6-12. Дан следующий массив:

this.state = {
	users: [
		{name: 'Коля', age: 30},
		{name: 'Вася', age: 40},
		{name: 'Петя', age: 50},
	]
};
Выведите его на экран в виде таблицы:

<table>
	<tr>
		<td>Коля</td><td>30</td>
	</tr>
	<tr>
		<td>Коля</td><td>40</td>
	</tr>
	<tr>
		<td>Коля</td><td>50</td>
	</tr>
</table>
Сделайте 2 инпута и кнопку, по нажатию на которую в список добавится новая tr с именем и возрастом.

Урок № 7 Продвинутая работа с формами

На текстареа
7-1. Дан текстареа и абзац. Сделайте так, чтобы при наборе текста в текстареа он автоматически появлялся в этом абзаце.

На чекбоксы
7-2. Дан чекбокс и абзац. Сделайте так, чтобы состояние чекбокса выводилось в этот абзац.

7-3. Дан чекбокс и какой-то абзац с текстом. Сделайте так, чтобы если чекбокс отмечен - абзац был виден на экране, а если не отмечен - не видим.

На селекты
7-4. Дан селект со списком городов (просто селект в HTML коде, option не из массива). Дан также абзац, в который выводится выбранный город. Сделайте так, чтобы при смене города в селекте в абзаце он также менялся.

7-5. Модифицируйте предыдущую задачу так, чтобы список городов хранился в массиве из стейта.

На радио
7-6. Даны 3 радиокнопочки со значениями 1, 2 и 3. Дан абзац. Сделайте так, чтобы значение выбранной радиокнопочки выводилось в этот абзац.

Практика
7-7. Дан текстареа и кнопка. Дан также стейт texts с массивом текстов. Изначально этот массив пустой, но каждый раз по нажатию на кнопку в конец этого массива должно записаться текущее содержимое текстареа. Выведите содержимое массива this.state.texts так, чтобы каждый элемент массива выводился в новом абзаце.

7-8. Дан селект со списком CSS цветов. Дан абзац. Сделайте так, чтобы при смене цвета абзац красился в выбранный цвет.

7-9. Дан селект с двумя значениями: 'отмечено' и 'не отмечено'. Дан также чекбокс. Сделайте так, чтобы при изменении значения селекта, чекбокс менял свое состояние с 'отмечено' на 'не отмечено' и наоброт.

7-10. Дан селект и 3 абзаца. В селекте можно выбрать один из трех пунктов. Сделайте так, чтобы в зависимости от выбора на экране был виден один из трех абзацев.

7-11. Дан инпут, кнопка и селект. Сделайте следующее: в инпут вводится какая-то строка и по нажатию на кнопку эта строка должна добавится в конец селекта в виде нового option.

7-12. Дан чекбокс и инпут. Сделайте так, чтобы если чекбокс не отмечен - то инпут находится в заблокированном состоянии (через disabled, а если отмечен - то в незаблокированном.

7-13. Даны 3 селекта. В первом можно выбрать день, во втором месяц, а в третьем год. Дан абзац. Сделайте так, чтобы в этот абзац вывелся день недели за выбранную дату. Пусть по умолчанию в селекте отображается текущая дата.

Урок № 8 Практика по работе с формами

Чекбоксы + массивы
8-1. Дан массив. Выведите элементы этого массива в виде списка ul. Сделайте так, чтобы внутри каждой li был чекбокс, по нажатию на который содержимое чекбокса будет перечеркиваться.

8-2. Дан массив с работниками. У каждого работника есть имя, фамилия и зарплата. Выведите этих работников на экран в виде таблицы. Для каждого работника сделайте чекбокс, который изначально будет отмечен. Под таблицей выведите сумму зарплат тех работников, для которых чекбокс отмечен.

Чекбоксы + ифы
8-3. Дан массив. Выведите каждый элемент этого массива в отдельном абзаце. Сделайте так, чтобы над каждым абзацем был чекбокс, со следующим поведением: если он отмечен - абзац под ним есть на экране, а если не отмечен - абзаца нет. По умолчанию пусть все чекбоксы отмечены.

8-4. Дан массив с юзерами:

this.state = {
	users: [
		{name: 'Коля', surname: 'Иванов', age: 30},
		{name: 'Вася', surname: 'Петров', age: 40},
		{name: 'Петя', surname: 'Сидоров', age: 50},
	]
};
Выведите элементы этого массива в виде списка ul. Имя, фамилия и возраст каждого юзера должны стоять в одной li через пробел. Внутри каждой li сделайте чекбокс. Если чекбокс не отмечен, то в li должно быть только имя юзера, а если отмечен - имя, фамилия и возраст.

Редактирование элементов
8-5. Дан массив. Выведите элементы этого массив в виде списка ul. Сделайте так, чтобы по нажатию на li внутри нее появился инпут, с помощью которого можно будет поредактировать текст этой li. По потери фокуса текст из инпута должен записаться обратно в li, а инпут исчезнуть.

8-6. Дан следующий массив:

this.state = {
	users: [
		{name: 'Коля', age: 30},
		{name: 'Вася', age: 40},
		{name: 'Петя', age: 50},
	]
};
Выведите его на экран в виде таблицы:

<table>
	<tr>
		<td>Коля</td><td>30</td>
	</tr>
	<tr>
		<td>Вася</td><td>40</td>
	</tr>
	<tr>
		<td>Петя</td><td>50</td>
	</tr>
</table>
Сделайте так, чтобы внутри каждой td была кнопка 'редактировать', по нажатию на которую текст этой td можно будет поредактировать с помощью появившегося в ней инпута.

Практика
8-7. Дан массив с туристическими маршрутами. Выведите эти маршруты на экран так, чтобы рядом с каждым стояла радио-кнопочка. Пользователь может выбрать один из маршрутов. Его выбор должен отобразиться на экране в абзаце.

8-8. Дан текстареа и кнопка. В текстареа пользователь нашего сайта будет вводить свои заметки. После нажатия на кнопку введенный текст должен появится под текстареа в виде блока div. Таких заметок может быть много. В каждой заметке должен стоять заголовок (заметка1, заметка2 и так далее), время создания заметки (часы, минуты, секунды), а также должна быть кнопка 'удалить' и кнопка 'редактировать'.

8-9. Дан массив с работниками. У каждого работника есть имя, фамилия, зарплата. Выведите этих работников на экран в виде таблицы. Сделайте так, чтобы работников можно было посортировать по любой колонке этот таблицы.

8-10. Даны два селекта. С помощью первого селекта можно выбрать язык пользователя 
 (русский или английский). Если в первом селекте выбран русский язык, то во втором селекте должен появится список дней недели по-русски. А если в первом селекте выбран английский - то и во втором дни недели будут по-английски.

8-11. Дан инпут. В него вводится строка. Сделайте так, чтобы если длина введенной строки от 4 до 9 символов - граница инпута была зеленой, в противном случае - красной. Инпут должен проверять свое содержимое по мере ввода.

8-12. Дан массив с работниками. У каждого работника есть имя, фамилия, зарплата, пол. Выведите этих работников на экран в виде таблицы. Под таблице сделайте форму, с помощью которой в таблицу можно будет добавить нового работника. В этой форме имя, фамилия, зарплата будут инпутами, а пол - селектом, в котором можно будет выбрать один из двух вариантов.

8-13. Дан массив с работниками. У каждого работника есть имя, фамилия, зарплата. Выведите этих работников на экран в виде таблицы. Причем выведите только первых 10 работников, а над таблицей сделайте ссылки: 1, 2, 3, 4 и так далее. По нажатию на каждую ссылку в таблице будет отображаться заданный десяток работников. Ссылки над таблицей должны сгенерироваться автоматически исходя из количества работников.

8-14. Дан селект. Изначально он пустой. Дан инпут и кнопка. В этот инпут вводится название города. По нажатию на кнопку этот город должен попасть в селект. Пользователь нашего скрипта добавляет несколько городов в селект, затем выбирает один из добавленных городов - и этот город должен отобразиться на экране в каком-нибудь абзаце.

8-15. Реализуйте калькулятор валют. Как он работает: дан инпут, в который вводится сумма и даны два селекта - в первом выбирается из какой валюты, а во втором - в какую. Дана также кнопка. По нажатию на эту кнопку в абзац должна вывестись сумма в выбранной валюте.

8-16. Дан следующий массив с вопросами и вариантами ответов:

this.state = {
	test: [
		{
			question: 'Вопрос 1',
			answers: [
				'Ответ1',
				'Ответ2',
				'Ответ3',
				'Ответ4',
				'Ответ5',
			],
			right: 3, //номер правильного ответа
		},
		{
			...
		},
		{
			...
		},
	]
};
Реализуйте текст с вопросами и вариантами ответов. Каждый вопрос должен быть в своем абзаце, а под ним - 5 радиокнопочек, с помощью которых можно выбрать один из ответов. Если ответ правильный - вопрос должен покраситься в зеленый цвет, а если неправильный - в красный.

Урок № 9 Работа с компонентами

9-1. Пусть в стейте хранится массив с юзерами. У каждого юзера есть имя, фамилия и возраст. Выведите всех юзеров на экран с помощью цикла. Сделайте так, чтобы отображением юзера на экран занимался отдельный компонент.

Урок № 10 Продвинутая работа с компонентами

На методы
10-1. Пусть в стейте хранится массив с юзерами. У каждого юзера есть имя, фамилия и возраст. Выведите всех юзеров на экран в виде таблицы. Пусть отображением юзера на экран занимается отдельный компонент.

10-2. Модифицируйте предыдущую задачу. Пусть у компонента-родителя есть метод showMessage, который алертом выводит '!'. Передайте этот метод в компонент-потомок. В таблице с юзерами сделайте еще одну колонку со ссылками. Привяжите к клику по этим ссылкам переданный метод.

10-3. Модифицируйте предыдущую задачу. Пусть теперь showMessage параметром принимает строку и выводит ее на экран. Сделайте так, чтобы по клику на ссылку выводилось имя соответствующего юзера.

10-4. Модифицируйте предыдущую задачу. Пусть теперь showMessage параметром принимает число и выводит его на экран. Сделайте так, чтобы по клику на ссылку на экран выводился номер юзера в массиве юзеров.

10-5. Модифицируйте предыдущую задачу. Поменяйте showMessage на deleteUser и сделайте так, чтобы по клику на ссылку юзер удалялся из таблицы.

На редактирование
10-6. Дан массив. Выведите его элементы в виде списка ul. Сделайте так, чтобы элементы массива выводились в отдельном компоненте. Рядом с текстом li сделайте ссылку 'редактировать'. По нажатию на эту ссылку она должна, а взамен должен появиться инпут, с помощью которого можно будет поредактировать текст li. По потери фокуса из инпута он должен исчезнуть, а взамен должна вернуться ссылка 'редактировать'.

Практика
10-7. Пусть в стейте хранится массив с продуктами. У каждого продукта есть название, цена и количество. Выведите все продукты на экран в виде таблицы. Сделайте так, чтобы в таблице была колонка, в которой выводится полная стоимость продукта (цена умножить на количество).

Пусть отображением продукта на экран занимается отдельный компонент. Сделайте так, чтобы рядом с каждым продуктом была кнопка 'удалить', с помощью которой можно удалить этот продукт из таблицы.

10-8. Модифицируйте предыдущую задачу так, чтобы появился еще и один отдельный компонент для добавления нового продукта в таблицу.

10-9. Модифицируйте предыдущую задачу так, чтобы под таблицей появился еще и один отдельный компонент, в котором будет выведена полная стоимость всех продуктов.

10-10. Модифицируйте предыдущую задачу так, чтобы в таблице появилась еще одна колонка, в которой будут находиться чекбоксы. Изначально эти чекбоксы отмечены. Сделайте так, чтобы полная стоимость всех продуктов выводилась только для тех продуктов, у которых чекбокс отмечен.

Урок № 11 Практика по фреймворку React

11-1. Дан массив с работниками. У каждого работника есть имя, фамилия, количество отработанных дней и зарплатная ставка за день. Выведите этих работников на экран в виде таблицы. Сделайте так, чтобы в последней колонке автоматически рассчитывалась зарплата работника (количество отработанных дней умножить на ставку). Сделайте так, чтобы количество дней и ставка выводились в виде инпутов. Если поредактировать эти инпуты - зарплата также должна поменяться. Под таблицей также выведите суммарную зарплату всех работников.

11-2. Реализуйте тест. Дан массив с вопросами и правильными ответами. Выведите все эти вопросы на экран, а под каждым вопросом - инпут. В этот инпут пользователь должен ввести правильный ответ на вопрос. Под всеми вопросами должна находиться кнопка 'сдать тест'. По нажатию на эту кнопку под вопросами вместо инпутов должно появится следующее: 'ваш ответ такой-то, правильно' или 'ваш ответ такой-то, не правильно, правильный ответ такой-то'. Правильные ответы должны быть зеленого цвета, а неправильные - красного.

11-3. Реализуйте тест. Дан массив с вопросами и правильными ответами. Вопросы должны показываться по одному. Пользователь может двигаться по вопросам стрелками 'назад' и 'вперед'. После того, как пользователь ответит на все вопросы, должна появится кнопочка 'проверить ответы'. По нажатию на эту кнопочку нужно вывести все вопросы на экран, под вопросами должно быть следующее: 'ваш ответ такой-то, правильно' или 'ваш ответ такой-то, не правильно, правильный ответ такой-то'. Правильные ответы должны быть зеленого цвета, а неправильные - красного.

11-4. Модифицируйте предыдущую задачу так, чтобы пользователь мог выбрать один из вариантов ответа с помощью 4-х радио кнопочек. Варианты ответов также должны храниться в массиве вопросами (придумайте удобную структуру массива, чтобы там лежал и вопрос, и правильный ответ, и варианты ответов).

11-5. Модифицируйте предыдущую задачу так, чтобы пользователь мог выбрать несколько вариантов ответа с помощью 4-х чекбоксов.

11-6. Реализуйте TODO-лист (чеклист). В нем должен быть список задач, которые хочет сделать пользователь. Задачу можно добавить, удалить, поредактировать. Кроме того, рядом с каждой задачей должен быть чекбокс, с помощью которого можно отметить эту задачу сделанной. Сделанная задача не удаляется из списка, а становится перечеркнутой (перечеркнуть текст можно с помощью text-decoration).

11-7. Реализуйте органайзер. Он должен представлять собой календарь за текущий месяц. По нажатию на определенную дату календаря мы должны увидеть список дел, запланированных на этот день. Каждое дело можно поредактировать, отметить сделанным или удалить, можно также добавить новое дело. Над календарем должны быть стрелочки 'назад' и 'вперед', с помощью которых можно сменить месяц и год в календаре.

11-8. Реализуйте игру крестики-нолики. Играют два игрока, каждый ходит по очереди.

11-9. Реализуйте игру морской бой (игрок против компьютера).

11-10. Реализуйте карточную игру 'дурак' (игрок против компьютера).

11-11. Реализуйте карточную игру 'тысяча' (игрок против двух компьютеров).

11-12. Реализуйте конструктор пиццы. Образец можете посмотреть, например, тут: gogopizza.by (ну или сами нагуглите, что понравится вам).

11-13. Реализуйте игру алхимия. Образец можете посмотреть, например, тут: vseigru.net (ну или сами нагуглите, что понравится вам).