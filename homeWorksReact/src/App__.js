import React, { Component } from 'react';
//import logo from './logo.svg';
import './App.css';
import Tasks0701 from './Tasks_07/Task-07.01';
import Tasks0702 from './Tasks_07/Task-07.02';
import Tasks0703 from './Tasks_07/Task-07.03';
import Tasks0704 from './Tasks_07/Task-07.04';
import Tasks0705 from './Tasks_07/Task-07.05';
import Tasks0706 from './Tasks_07/Task-07.06';
import Tasks0707 from './Tasks_07/Task-07.07';
import Tasks0708 from './Tasks_07/Task-07.08';
import Tasks0709 from './Tasks_07/Task-07.09';
import Tasks0710 from './Tasks_07/Task-07.10';
import Tasks0711 from './Tasks_07/Task-07.11';
import Tasks0712 from './Tasks_07/Task-07.12';
import Tasks0713 from './Tasks_07/Task-07.13';
import Tasks0801 from './Tasks_08/Task-08.01';
import Tasks0802 from './Tasks_08/Task-08.02';
import Tasks0803 from './Tasks_08/Task-08.03';
import Tasks0804 from './Tasks_08/Task-08.04';
import Tasks0805 from './Tasks_08/Task-08.05';
import Tasks0806 from './Tasks_08/Task-08.06';
import Tasks0807 from './Tasks_08/Task-08.07';
import Tasks0808 from './Tasks_08/Task-08.08';
import Tasks0809 from './Tasks_08/Task-08.09';
import Tasks0810 from './Tasks_08/Task-08.10';
import Tasks0811 from './Tasks_08/Task-08.11';
import Tasks0812 from './Tasks_08/Task-08.12';
import Tasks0813 from './Tasks_08/Task-08.13';
import Tasks0814 from './Tasks_08/Task-08.14';
import Tasks0815 from './Tasks_08/Task-08.15';
import Tasks0816 from './Tasks_08/Task-08.16';
import Tasks1001 from './Tasks_10/Task-10.01';
import Tasks1002 from './Tasks_10/Task-10.02';
import Tasks1003 from './Tasks_10/Task-10.03';
import Tasks1004 from './Tasks_10/Task-10.04';
import Tasks1005 from './Tasks_10/Task-10.05';
import Tasks1006 from './Tasks_10/Task-10.06';
import Tasks1007 from './Tasks_10/Task-10.07';
import Tasks1010 from './Tasks_10/Task-10.10';
import Tasks1101 from './Tasks_11/Task-11.01';
import Tasks1102 from './Tasks_11/Task-11.02';
import Tasks1103 from './Tasks_11/Task-11.03';
import Tasks1104 from './Tasks_11/Task-11.04';
import Tasks1105 from './Tasks_11/Task-11.05';
import Tasks1106 from './Tasks_11/Task-11.06';
import Tasks1107 from './Tasks_11/Task-11.07';
import Tasks1112 from './Tasks_11/Task-11.12';

class App extends Component {
  state = {
    routes: [
      {name: 'Task-07.01', route: <Tasks0701/>, 
        text: '7-1. Дан текстареа и абзац. Сделайте так, чтобы при наборе текста в текстареа он автоматически появлялся в этом абзаце.' },
      {name: 'Task-07.02', route: <Tasks0702/>, 
        text: '7-2. Дан чекбокс и абзац. Сделайте так, чтобы состояние чекбокса выводилось в этот абзац.' },
      {name: 'Task-07.03', route: <Tasks0703/>, 
        text: '7-3. Дан чекбокс и какой-то абзац с текстом. Сделайте так, чтобы если чекбокс отмечен - абзац был виден на экране, а если не отмечен - не видим.' },
      {name: 'Task-07.04', route: <Tasks0704/>, 
        text: '7-4. Дан селект со списком городов (просто селект в HTML коде, option не из массива). Дан также абзац, в который выводится выбранный город. Сделайте так, чтобы при смене города в селекте в абзаце он также менялся.' }, 
      {name: 'Task-07.05', route: <Tasks0705/>,  
        text: '7-5. Модифицируйте предыдущую задачу так, чтобы список городов хранился в массиве из стейта.' },
      {name: 'Task-07.06', route: <Tasks0706/>, 
        text: '7-6. Даны 3 радиокнопочки со значениями 1, 2 и 3. Дан абзац. Сделайте так, чтобы значение выбранной радиокнопочки выводилось в этот абзац.' }, 
      {name: 'Task-07.07', route: <Tasks0707/>, 
        text: '7-7. Дан текстареа и кнопка. Дан также стейт texts с массивом текстов. Изначально этот массив пустой, но каждый раз по нажатию на кнопку в конец этого массива должно записаться текущее содержимое текстареа. Выведите содержимое массива this.state.texts так, чтобы каждый элемент массива выводился в новом абзаце.' }, 
      {name: 'Task-07.08', route: <Tasks0708/>, 
        text: '7-8. Дан селект со списком CSS цветов. Дан абзац. Сделайте так, чтобы при смене цвета абзац красился в выбранный цвет.' }, 
      {name: 'Task-07.09', route: <Tasks0709/>, 
        text: '7-9. Дан селект с двумя значениями: "отмечено" и не "отмечено". Дан также чекбокс. Сделайте так, чтобы при изменении значения селекта, чекбокс менял свое состояние с "отмечено" на "не отмечено" и наоброт.' }, 
      {name: 'Task-07.10', route: <Tasks0710/>, 
        text: '7-10. Дан селект и 3 абзаца. В селекте можно выбрать один из трех пунктов. Сделайте так, чтобы в зависимости от выбора на экране был виден один из трех абзацев.' }, 
      {name: 'Task-07.11', route: <Tasks0711/>, 
        text: '7-11. Дан инпут, кнопка и селект. Сделайте следующее: в инпут вводится какая-то строка и по нажатию на кнопку эта строка должна добавится в конец селекта в виде нового option.' }, 
      {name: 'Task-07.12', route: <Tasks0712/>, 
        text: '7-12. Дан чекбокс и инпут. Сделайте так, чтобы если чекбокс не отмечен - то инпут находится в заблокированном состоянии (через disabled, а если отмечен - то в незаблокированном.' }, 
      {name: 'Task-07.13', route: <Tasks0713/>, 
        text: '7-13. Даны 3 селекта. В первом можно выбрать день, во втором месяц, а в третьем год. Дан абзац. Сделайте так, чтобы в этот абзац вывелся день недели за выбранную дату. Пусть по умолчанию в селекте отображается текущая дата.' }, 
      {name: 'Task-08.01', route: <Tasks0801/>, 
      text: '8-1. Дан массив. Выведите элементы этого массива в виде списка ul. Сделайте так, чтобы внутри каждой li был чекбокс, по нажатию на который содержимое чекбокса будет перечеркиваться.' },
      {name: 'Task-08.02', route: <Tasks0802/>, 
      text: 'Дан массив с работниками. У каждого работника есть имя, фамилия и зарплата. Выведите этих работников на экран в виде таблицы. Для каждого работника сделайте чекбокс, который изначально будет отмечен. Под таблицей выведите сумму зарплат тех работников, для которых чекбокс отмечен.' },
      {name: 'Task-08.03', route: <Tasks0803/>, 
      text: '8-3. Дан массив. Выведите каждый элемент этого массива в отдельном абзаце. Сделайте так, чтобы над каждым абзацем был чекбокс, со следующим поведением: если он отмечен - абзац под ним есть на экране, а если не отмечен - абзаца нет. По умолчанию пусть все чекбоксы отмечены.' },
      {name: 'Task-08.04', route: <Tasks0804/>, 
      text: '8-4. Дан массив с юзерами. Выведите элементы этого массива в виде списка ul. Имя, фамилия и возраст каждого юзера должны стоять в одной li через пробел. Внутри каждой li сделайте чекбокс. Если чекбокс не отмечен, то в li должно быть только имя юзера, а если отмечен - имя, фамилия и возраст.' },
      {name: 'Task-08.05', route: <Tasks0805/>, 
      text: '8-5. Дан массив. Выведите элементы этого массив в виде списка ul. Сделайте так, чтобы по нажатию на li внутри нее появился инпут, с помощью которого можно будет поредактировать текст этой li. По потери фокуса текст из инпута должен записаться обратно в li, а инпут исчезнуть.' },
      {name: 'Task-08.06', route: <Tasks0806/>, 
      text: 'Дан массив. Выведите его на экран в виде таблицы. Сделайте так, чтобы внутри каждой td была кнопка "редактировать", по нажатию на которую текст этой td можно будет поредактировать с помощью появившегося в ней инпута.' },
      {name: 'Task-08.07', route: <Tasks0807/>, 
      text: '8-7. Дан массив с туристическими маршрутами. Выведите эти маршруты на экран так, чтобы рядом с каждым стояла радио-кнопочка. Пользователь может выбрать один из маршрутов. Его выбор должен отобразиться на экране в абзаце.' },
      {name: 'Task-08.08', route: <Tasks0808/>, 
      text: '8-8. Дан текстареа и кнопка. В текстареа пользователь нашего сайта будет вводить свои заметки. После нажатия на кнопку введенный текст должен появится под текстареа в виде блока div. Таких заметок может быть много. В каждой заметке должен стоять заголовок (заметка1, заметка2 и так далее), время создания заметки (часы, минуты, секунды), а также должна быть кнопка "удалить" и кнопка "редактировать".' },
      {name: 'Task-08.09', route: <Tasks0809/>, 
      text: '8-9. Дан массив с работниками. У каждого работника есть имя, фамилия, зарплата. Выведите этих работников на экран в виде таблицы. Сделайте так, чтобы работников можно было посортировать по любой колонке этот таблицы.' },
      {name: 'Task-08.10', route: <Tasks0810/>, 
      text: '8-10. Даны два селекта. С помощью первого селекта можно выбрать язык пользователя (русский или английский). Если в первом селекте выбран русский язык, то во втором селекте должен появится список дней недели по-русски. А если в первом селекте выбран английский - то и во втором дни недели будут по-английски.' },
      {name: 'Task-08.11', route: <Tasks0811/>, 
      text: '8-11. Дан инпут. В него вводится строка. Сделайте так, чтобы если длина введенной строки от 4 до 9 символов - граница инпута была зеленой, в противном случае - красной. Инпут должен проверять свое содержимое по мере ввода.' },
      {name: 'Task-08.12', route: <Tasks0812/>, 
      text: '8-12. Дан массив с работниками. У каждого работника есть имя, фамилия, зарплата, пол. Выведите этих работников на экран в виде таблицы. Под таблице сделайте форму, с помощью которой в таблицу можно будет добавить нового работника. В этой форме имя, фамилия, зарплата будут инпутами, а пол - селектом, в котором можно будет выбрать один из двух вариантов.' },
      {name: 'Task-08.13', route: <Tasks0813/>, 
      text: '8-13. Дан массив с работниками. У каждого работника есть имя, фамилия, зарплата. Выведите этих работников на экран в виде таблицы. Причем выведите только первых 10 работников, а над таблицей сделайте ссылки: 1, 2, 3, 4 и так далее. По нажатию на каждую ссылку в таблице будет отображаться заданный десяток работников. Ссылки над таблицей должны сгенерироваться автоматически исходя из количества работников.' },
      {name: 'Task-08.14', route: <Tasks0814/>, 
      text: '8-14. Дан селект. Изначально он пустой. Дан инпут и кнопка. В этот инпут вводится название города. По нажатию на кнопку этот город должен попасть в селект. Пользователь нашего скрипта добавляет несколько городов в селект, затем выбирает один из добавленных городов - и этот город должен отобразиться на экране в каком-нибудь абзаце.' },
      {name: 'Task-08.15', route: <Tasks0815/>, 
      text: '8-15. Реализуйте калькулятор валют. Как он работает: дан инпут, в который вводится сумма и даны два селекта - в первом выбирается из какой валюты, а во втором - в какую. Дана также кнопка. По нажатию на эту кнопку в абзац должна вывестись сумма в выбранной валюте.' },
      {name: 'Task-08.16', route: <Tasks0816/>, 
      text: 'Дан массив с вопросами и вариантами ответов. Реализуйте текст с вопросами и вариантами ответов. Каждый вопрос должен быть в своем абзаце, а под ним - 5 радиокнопочек, с помощью которых можно выбрать один из ответов. Если ответ правильный - вопрос должен покраситься в зеленый цвет, а если неправильный - в красный.' },
      {name: 'Task-10.01', route: <Tasks1001/>, 
      text: '10-1. Пусть в стейте хранится массив с юзерами. У каждого юзера есть имя, фамилия и возраст. Выведите всех юзеров на экран в виде таблицы. Пусть отображением юзера на экран занимается отдельный компонент.' },
      {name: 'Task-10.02', route: <Tasks1002/>, 
      text: '10-2. Модифицируйте предыдущую задачу. Пусть у компонента-родителя есть метод showMessage, который алертом выводит "!". Передайте этот метод в компонент-потомок. В таблице с юзерами сделайте еще одну колонку со ссылками. Привяжите к клику по этим ссылкам переданный метод.' },
      {name: 'Task-10.03', route: <Tasks1003/>, 
      text: '10-3. Модифицируйте предыдущую задачу. Пусть теперь showMessage параметром принимает строку и выводит ее на экран. Сделайте так, чтобы по клику на ссылку выводилось имя соответствующего юзера.' },
      {name: 'Task-10.04', route: <Tasks1004/>, 
      text: '10-4. Модифицируйте предыдущую задачу. Пусть теперь showMessage параметром принимает число и выводит его на экран. Сделайте так, чтобы по клику на ссылку на экран выводился номер юзера в массиве юзеров.' },
      {name: 'Task-10.05', route: <Tasks1005/>, 
      text: '10-5. Модифицируйте предыдущую задачу. Поменяйте showMessage на deleteUser и сделайте так, чтобы по клику на ссылку юзер удалялся из таблицы.' },
      {name: 'Task-10.06', route: <Tasks1006/>, 
      text: '10-6. Дан массив. Выведите его элементы в виде списка ul. Сделайте так, чтобы элементы массива выводились в отдельном компоненте. Рядом с текстом li сделайте ссылку "редактировать". По нажатию на эту ссылку она должна, а взамен должен появиться инпут, с помощью которого можно будет поредактировать текст li. По потери фокуса из инпута он должен исчезнуть, а взамен должна вернуться ссылка "редактировать".' },
      {name: 'Task-10.07', route: <Tasks1007/>, 
        text: '10-7. Пусть в стейте хранится массив с продуктами. У каждого продукта есть название, цена и количество. Выведите все продукты на экран в виде таблицы. Сделайте так, чтобы в таблице была колонка, в которой выводится полная стоимость продукта (цена умножить на количество).' },
      {name: 'Task-10.10', route: <Tasks1010/>, 
        text: '10-10. Модифицируйте предыдущую задачу так, чтобы в таблице появилась еще одна колонка, в которой будут находиться чекбоксы. Изначально эти чекбоксы отмечены. Сделайте так, чтобы полная стоимость всех продуктов выводилась только для тех продуктов, у которых чекбокс отмечен.' },
      {name: 'Task-11.01', route: <Tasks1101/>, 
        text: '11-1. Дан массив с работниками. У каждого работника есть имя, фамилия, количество отработанных дней и зарплатная ставка за день. Выведите этих работников на экран в виде таблицы. Сделайте так, чтобы в последней колонке автоматически рассчитывалась зарплата работника (количество отработанных дней умножить на ставку). Сделайте так, чтобы количество дней и ставка выводились в виде инпутов. Если поредактировать эти инпуты - зарплата также должна поменяться. Под таблицей также выведите суммарную зарплату всех работников.' },
      {name: 'Task-11.02', route: <Tasks1102/>, 
        text: '11-2. Реализуйте тест. Дан массив с вопросами и правильными ответами. Выведите все эти вопросы на экран, а под каждым вопросом - инпут. В этот инпут пользователь должен ввести правильный ответ на вопрос. Под всеми вопросами должна находиться кнопка "сдать тест". По нажатию на эту кнопку под вопросами вместо инпутов должно появится следующее: "ваш ответ такой-то, правильно" или "ваш ответ такой-то, не правильно, правильный ответ такой-то". Правильные ответы должны быть зеленого цвета, а неправильные - красного.' },
      {name: 'Task-11.03', route: <Tasks1103/>, 
        text: '11-3. Реализуйте тест. Дан массив с вопросами и правильными ответами. Вопросы должны показываться по одному. Пользователь может двигаться по вопросам стрелками "назад" и "вперед". После того, как пользователь ответит на все вопросы, должна появится кнопочка "проверить ответы". По нажатию на эту кнопочку нужно вывести все вопросы на экран, под вопросами должно быть следующее: "ваш ответ такой-то, правильно" или "ваш ответ такой-то, не правильно, правильный ответ такой-то". Правильные ответы должны быть зеленого цвета, а неправильные - красного.' },
      {name: 'Task-11.04', route: <Tasks1104/>, 
        text: '11-4. Модифицируйте предыдущую задачу так, чтобы пользователь мог выбрать один из вариантов ответа с помощью 4-х радио кнопочек. Варианты ответов также должны храниться в массиве вопросами (придумайте удобную структуру массива, чтобы там лежал и вопрос, и правильный ответ, и варианты ответов).' },
      {name: 'Task-11.05', route: <Tasks1105/>, 
        text: '11-5. Модифицируйте предыдущую задачу так, чтобы пользователь мог выбрать несколько вариантов ответа с помощью 4-х чекбоксов.' },
      {name: 'Task-11.06', route: <Tasks1106/>, 
        text: '11-6. Реализуйте TODO-лист (чеклист). В нем должен быть список задач, которые хочет сделать пользователь. Задачу можно добавить, удалить, поредактировать. Кроме того, рядом с каждой задачей должен быть чекбокс, с помощью которого можно отметить эту задачу сделанной. Сделанная задача не удаляется из списка, а становится перечеркнутой (перечеркнуть текст можно с помощью text-decoration).' },
      {name: 'Task-11.07', route: <Tasks1107/>, 
        text: '11-7. Реализуйте органайзер. Он должен представлять собой календарь за текущий месяц. По нажатию на определенную дату календаря мы должны увидеть список дел, запланированных на этот день. Каждое дело можно поредактировать, отметить сделанным или удалить, можно также добавить новое дело. Над календарем должны быть стрелочки "назад" и "вперед", с помощью которых можно сменить месяц и год в календаре.' },
      {name: 'Task-11.12', route: <Tasks1112/>, 
        text: '11-12. Реализуйте конструктор пиццы. Образец можете посмотреть, например, тут: gogopizza.by (ну или сами нагуглите, что понравится вам).' }
    ]
  }

  handlerButton = (idx) => {
    this.setState({
      task: this.state.routes[idx].route, 
      taskName: this.state.routes[idx].name,
      taskText: this.state.routes[idx].text
    });
  }

  render(){
    const buttons = this.state.routes.map((item, index)=>{
      return <button 
            onClick={()=>{this.handlerButton(index)}} 
            key={index}>{item.name}
          </button>
    });
    return (
      <div className="container">
        <div className="row">
          <div className="col-md-12">
            <div className="App">
                {buttons}
            </div>
          </div>
        </div>
        <div className="row">
          <div className="col-md-12">
            <main className="App-header">
              <h4>{this.state.taskName}</h4>
              <p className="notes">{this.state.taskText}</p>
              {this.state.task}
            </main>
          </div>
        </div>
      </div>
    );
  }
}

export default App;
